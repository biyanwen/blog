<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/blog/2021/11/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>heihei</title>
    <url>/blog/2021/12/02/heihei/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>网站架构模式</title>
    <url>/blog/2021/12/02/%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="网站架构模式"><a href="#网站架构模式" class="headerlink" title="网站架构模式"></a>网站架构模式</h1><p>大型互联网公司为了实现网站的高性能、高可用、易伸缩、可扩展、安全等各种技术架构目标，提出了很多解决方案，而这些方案又被更多网站重复使用，从而逐渐形成大型网站架构模式，下面对常见的模式进行总结。</p>
<span id="more"></span>

<h2 id="1、分层"><a href="#1、分层" class="headerlink" title="1、分层"></a>1、分层</h2><p>分层是企业应用系统中最常见的一种架构模式，将系统在横向维度上切分成几个部分，每个部分负责一部分相对比较单一的职责，然后通过上层对下层的依赖和调用组成一个完整的系统，一般会将网站软件系统分为应用层、服务层、数据层</p>
<h3 id="优点：便于分工合作开发和维护"><a href="#优点：便于分工合作开发和维护" class="headerlink" title="优点：便于分工合作开发和维护"></a>优点：便于分工合作开发和维护</h3><p>因为各层之间具有一定的独立性，只要维持调用接口不变，各层可以根据具体问题独立演化发展而不需要其他层必须做出相应调整。</p>
<h3 id="缺点：加大了设计系统的难度"><a href="#缺点：加大了设计系统的难度" class="headerlink" title="缺点：加大了设计系统的难度"></a>缺点：加大了设计系统的难度</h3><p>必须合理规划层次边界和接口，在开发过程中，严格遵循分层架构的约束，禁止跨层次的调用（应用层直接调用数据层）及逆向调用（数据层调用服务层，或者服务层调用应用层）。</p>
<h2 id="2、分割"><a href="#2、分割" class="headerlink" title="2、分割"></a>2、分割</h2><p>分割是在纵向方面对软件进行切分，将不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，例如将购物、论坛、搜索、广告分割成不同的应用，由独立的团队负责，部署在不同的服务器上</p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>1、有助于软件的开发和维护</li>
<li>2、便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力</li>
</ul>
<h2 id="3、分布式"><a href="#3、分布式" class="headerlink" title="3、分布式"></a>3、分布式</h2><p>分层和分割的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。</p>
<h3 id="优点：可以为更多的用户提供服务"><a href="#优点：可以为更多的用户提供服务" class="headerlink" title="优点：可以为更多的用户提供服务"></a>优点：可以为更多的用户提供服务</h3><p>分布式意味着可以使用更多的计算机完成同样的功能，计算机越多，CPU、内存、存储资源也就越多，能够处理的并发访问和数据量就越大</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li><p>1、性能可能会收到较大影响</p>
<p>因为分布式服务之间的调用必须通过网络</p>
</li>
<li><p>2、可用性可能会降低</p>
<p>服务器越多，服务器宕机的概率也就越大，一台服务器宕机造成的服务不可用可能会导致很多应用不可访问</p>
</li>
<li><p>3、难以保持数据的一致性</p>
</li>
<li><p>4、开发管理维护难度加大</p>
</li>
</ul>
<h3 id="常用的分布式方案："><a href="#常用的分布式方案：" class="headerlink" title="常用的分布式方案："></a>常用的分布式方案：</h3><ul>
<li><p>1、分布式应用和服务</p>
<p>将分层和分割后的应用和服务模块分布式部署</p>
<ul>
<li><p>优点：</p>
<ul>
<li>1、改善网站性能和并发性、加快开发和发布速度、减少数据库连接资源消耗外</li>
<li>2、可以使不同应用复用共同的服务，便于业务功能扩展</li>
</ul>
</li>
</ul>
</li>
<li><p>2、分布式静态资源</p>
<p>也叫动静分离，网站的静态资源如JS，CSS，Logo图片等资源独立分布式部署，并采用独立的域名</p>
<ul>
<li><p>优点：</p>
<ul>
<li>1、静态资源分布式部署可以减轻应用服务器的负载压力</li>
<li>2、通过使用独立域名加快浏览器并发加载的速度</li>
<li>3、由负责用户体验的团队进行开发维护有利于网站分工合作，使不同技术工种术业有专攻</li>
</ul>
</li>
</ul>
</li>
<li><p>3、分布式数据和存储</p>
<p>大型网站需要处理以P为单位的海量数据，单台计算机无法提供如此大的存储空间，这些数据需要分布式存储</p>
</li>
</ul>
<h2 id="4、集群"><a href="#4、集群" class="headerlink" title="4、集群"></a>4、集群</h2><p>即多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务</p>
<h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><ul>
<li><p>1、更好的并发性</p>
<p>因为有很多服务器提供相同的服务</p>
</li>
<li><p>2、更好的拓展性</p>
<p>如果目前的资源不能满足业务需求可以直接以增加服务器的方式对系统进行拓展</p>
</li>
<li><p>3、更好的可用性</p>
<p>如果某台服务器宕机并不会对系统功能造成影响，因为负载均衡设备会将请求转发到其他服务器中</p>
</li>
</ul>
<h2 id="5、缓存"><a href="#5、缓存" class="headerlink" title="5、缓存"></a>5、缓存</h2><p>缓存就是将数据存放在距离计算最近的位置以加快处理速度。<br>使用缓存前提条件：<br>1、数据访问热点不均衡，某些数据会被更频繁的访问，这些数据应该放在缓存中；2、数据在某个时间段内有效，不会很快过期，否则缓存的数据就会因已经失效而产生脏读，影响结果的正确性。</p>
<h3 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>1、加快数据访问速度</li>
<li>2、减轻后端应用和数据存储的负载压力</li>
</ul>
<h3 id="常用缓存方式："><a href="#常用缓存方式：" class="headerlink" title="常用缓存方式："></a>常用缓存方式：</h3><ul>
<li><p>1、CDN</p>
<p>容分发网络，部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商那里，在这里缓存网站的一些静态资源（较少变化的数据），可以就近以最快速度返回给用户，如视频网站和门户网站会将用户访问量大的热点内容缓存在CDN。</p>
</li>
<li><p>2、反向代理</p>
<p>反向代理属于网站前端架构的一部分，部署在网站的前端，当用户请求到达网站的数据中心时，最先访问到的就是反向代理服务器，这里缓存网站的静态资源，无需将请求继续转发给应用服务器就能返回给用户。</p>
</li>
<li><p>3、本地缓存</p>
<p>在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而无需访问数据库，例如使用redis进行缓存</p>
</li>
<li><p>4、分布式缓存</p>
<p>大型网站的数据量非常庞大，即使只缓存一小部分，需要的内存空间也不是单机能承受的，所以除了本地缓存，还需要分布式缓存，将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据</p>
</li>
</ul>
<h2 id="6、异步"><a href="#6、异步" class="headerlink" title="6、异步"></a>6、异步</h2><p>主要目的是解耦，将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方式异步执行进行协作。<br>单一服务器内部可通过多线程共享内存队列的方式实现异步；<br>在分布式系统中，多个服务器集群通过分布式消息队列实现异步，分布式消息队列可以看作内存队列的分布式部署。</p>
<h3 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h3><ul>
<li><p>1、提高系统可用性</p>
<p>消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障。消费者服务器恢复正常后，继续处理消息队列中的数据。</p>
</li>
<li><p>2、加快网站响应速度</p>
<p>处在业务处理前端的生产者服务器在处理完业务请求后，将数据写入消息队列，不需要等待消费者服务器处理就可以返回，响应延迟减少。</p>
</li>
<li><p>3、消除并发访问高峰</p>
<p>用户访问量有可能突然增加很多倍，但是并不会持续很久，例如在秒杀活动进行的时刻，这种突增的访问量有可能是服务被压垮，如果为了这个时刻而增加硬件设施又得不偿失，所以使用异步的方式就可以做到“削峰填谷”，使用消息队列将突然增加的访问请求数据放入消息队列中，等待消费者服务器依次处理，就不会对整个网站负载造成太大压力。</p>
</li>
</ul>
<h2 id="7、冗余"><a href="#7、冗余" class="headerlink" title="7、冗余"></a>7、冗余</h2><p>沉余包括服务器冗余运行，数据冗余备份。网站需要不间断的提供服务，因此必须保证在有服务器宕机的情况下可以将服务和数据转移到其他机器上，以保证服务的高可用和数据的不丢失</p>
<h2 id="8、自动化"><a href="#8、自动化" class="headerlink" title="8、自动化"></a>8、自动化</h2><p>包括但不限于以下部分：<br>1、自动化代码管理；2、自动化测试；3、自动化安全检测；4、自动化部署；<br>5、自动化监控 等等。</p>
]]></content>
      <tags>
        <tag>很好</tag>
      </tags>
  </entry>
</search>
